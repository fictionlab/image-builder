#!/bin/bash -e

usage()
{
	echo "Usage: image-builder [ -f FIRST ] [ -l LAST ] [ -c ] [ -d ] [ -e ] [ -x ] [ -b STAGE ] PATH" 1>&2
}

exit_abnormal()
{
	usage
	exit 1
}

if [ "$(id -u)" != "0" ]; then
	echo "Please run this script as root" 1>&2
	exit 1
fi

export IMAGE_BUILDER_DIR="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))"
export SCRIPT_DIR="${IMAGE_BUILDER_DIR}/scripts"

source "${SCRIPT_DIR}/common.sh"
source "${SCRIPT_DIR}/stages.sh"
source "${SCRIPT_DIR}/dependencies_check.sh"

dependencies_check "${IMAGE_BUILDER_DIR}/depends"

STAGE_FIRST=0
STAGE_LAST=99
CONTINUE=0
CLEAN=1
EXPORT_IMAGES=1
COMPRESS_IMAGES=0
EDIT_MODE=0

while getopts ":f:l:cdexb:" options; do
	case "${options}" in
		f)
			STAGE_FIRST=${OPTARG}
			;;
		l)
			STAGE_LAST=${OPTARG}
			;;
		c)
			CONTINUE=1
			;;
		d)
			CLEAN=0
			;;
		e)
			EXPORT_IMAGES=0
			;;
		x)
			COMPRESS_IMAGES=1
			;;
		b)
			CONTINUE=1
			EDIT_MODE=1
			EDIT_STAGE=${OPTARG}
			;;
		:)
			echo "Error: -${OPTARG} requires an argument."
			exit_abnormal
			;;
		*)
			exit_abnormal
			;;
	esac
done

shift $((OPTIND-1))

BASE_DIR="$(cd "$1" && pwd)"

dependencies_check "${BASE_DIR}/depends"

export IMG_DATE="$(date +%Y-%m-%d)"
export IMG_TIME="$(date +%H-%M-%S)"

if [[ $CONTINUE = 1 ]]; then
	PREV_WORK="$(ls -1 ${BASE_DIR}/work 2>/dev/null | tail -n 1)"
fi

if [[ ! -z $PREV_WORK ]]; then
	export WORK_DIR="${BASE_DIR}/work/${PREV_WORK}"
else
	export WORK_DIR="${BASE_DIR}/work/${IMG_DATE}-${IMG_TIME}"
fi

if [[ $EDIT_MODE = 1 ]]; then
	ROOTFS_DIR="${WORK_DIR}/stage${EDIT_STAGE}/rootfs"
	on_chroot
	unmount "${ROOTFS_DIR}"
	exit 0
fi

export DEPLOY_DIR="${BASE_DIR}/deploy"
export LOG_FILE="${WORK_DIR}/build.log"

export STAGE
export STAGE_DIR
export STAGE_WORK_DIR
export PREV_STAGE
export PREV_STAGE_DIR
export ROOTFS_DIR
export PREV_ROOTFS_DIR
export EXPORT_STAGE
export EXPORT_ROOTFS_DIR
export IMG_FILENAME

source "${BASE_DIR}/config.sh"

mkdir -p "${WORK_DIR}"
log "Begin ${BASE_DIR}"

for i in $(seq 0 ${STAGE_LAST}); do
	if [[ -d "${BASE_DIR}/stage${i}" ]]; then
		STAGE_NR="${i}"
		STAGE_DIR="${BASE_DIR}/stage${i}"
		run_stage
	fi
done

if [[ $EXPORT_IMAGES = 1 ]]; then
	log "Exporting images"
	CLEAN=1
	for EXPORT_STAGE in ${EXPORT_STAGES[@]}; do
		STAGE_DIR="${BASE_DIR}/export-image"
		source "${BASE_DIR}/${EXPORT_STAGE}/EXPORT_IMAGE"
		IMG_FILENAME="${IMG_NAME}-${IMG_VERSION}-${IMG_DATE}${IMG_SUFFIX}.img"
		IMG_FILENAMES+=( $IMG_FILENAME )
		EXPORT_ROOTFS_DIR="${WORK_DIR}/${EXPORT_STAGE}/rootfs"
		run_stage
	done
fi

if [[ $COMPRESS_IMAGES = 1 ]]; then
	log "Compressing images"
	for IMG_FILENAME in ${IMG_FILENAMES[@]}; do
		if [[ -f "${DEPLOY_DIR}/${IMG_FILENAME}" ]]; then
			xz -v -9 -T0 "${DEPLOY_DIR}/${IMG_FILENAME}"
		fi
	done
fi

log "End ${BASE_DIR}"
